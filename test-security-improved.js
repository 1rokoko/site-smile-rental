const { chromium } = require('playwright');

(async () => {
  console.log('üîí –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò');
  console.log('='.repeat(60));
  
  const browser = await chromium.launch();
  const page = await browser.newPage();
  
  try {
    console.log('üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ https://smilerentalphuket.com...');
    const response = await page.goto('https://smilerentalphuket.com', { 
      waitUntil: 'networkidle', 
      timeout: 20000 
    });
    
    const headers = response.headers();
    
    console.log('\nüìã –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ó–ê–ì–û–õ–û–í–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:');
    
    const securityHeaders = [
      'strict-transport-security',
      'content-security-policy',
      'x-frame-options',
      'x-content-type-options',
      'x-xss-protection',
      'referrer-policy',
      'permissions-policy',
      'x-permitted-cross-domain-policies'
    ];
    
    let presentHeaders = 0;
    securityHeaders.forEach(header => {
      const value = headers[header];
      const status = value ? '‚úÖ' : '‚ùå';
      if (value) presentHeaders++;
      console.log(`  ${status} ${header}: ${value || '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
    });
    
    console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê: ${presentHeaders}/${securityHeaders.length} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
    console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ SecurityHeaders.com...');
    await page.waitForTimeout(5000);
    
    console.log('üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ SecurityHeaders.com –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞...');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ SecurityHeaders.com
    await page.goto('https://securityheaders.com/', {
      waitUntil: 'domcontentloaded',
      timeout: 20000
    });
    
    // –í–≤–æ–¥–∏–º URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    await page.fill('input[name="q"]', 'smilerentalphuket.com');
    await page.click('button[type="submit"]');
    
    // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await page.waitForTimeout(10000);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
      const rating = await page.locator('.grade').first().textContent();
      console.log('üèÜ –ù–û–í–´–ô –†–ï–ô–¢–ò–ù–ì SecurityHeaders.com:', rating);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
      const improvements = await page.locator('.present').allTextContents();
      if (improvements.length > 0) {
        console.log('\n‚úÖ –ü–†–ò–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ó–ê–ì–û–õ–û–í–ö–ò:');
        improvements.forEach((improvement, index) => {
          console.log(`  ${index + 1}. ${improvement}`);
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã
      const issues = await page.locator('.missing').allTextContents();
      if (issues.length > 0) {
        console.log('\n‚ö†Ô∏è –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ó–ê–ì–û–õ–û–í–ö–ò:');
        issues.forEach((issue, index) => {
          console.log(`  ${index + 1}. ${issue}`);
        });
      }
      
      // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
      await page.screenshot({ 
        path: 'security-headers-improved.png', 
        fullPage: true 
      });
      console.log('\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞: security-headers-improved.png');
      
      // –û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—Ö–∞
      const isImproved = rating && (rating.includes('A') || rating.includes('B'));
      console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ó–ê–î–ê–ß–ò 3:');
      console.log('‚úÖ Security headers –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ nginx');
      console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞');
      console.log('‚úÖ –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–≤–µ—Ä–µ–Ω:', rating);
      console.log('üìä –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞:', isImproved ? '‚úÖ –î–ê (A/B —Ä–µ–π—Ç–∏–Ω–≥)' : '‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û');
      
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å SecurityHeaders.com');
      console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ, —Å–∞–π—Ç –µ—â–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π');
      
      // –í—Å–µ —Ä–∞–≤–Ω–æ –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
      await page.screenshot({ 
        path: 'security-headers-attempt.png', 
        fullPage: true 
      });
      console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ø—ã—Ç–∫–∏: security-headers-attempt.png');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', error.message);
  }
  
  await browser.close();
  
  console.log('\n' + '='.repeat(60));
  console.log('üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ó–ê–í–ï–†–®–ï–ù–û');
})().catch(console.error);
