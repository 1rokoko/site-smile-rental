const { spawn } = require('child_process');
const { chromium } = require('playwright');

console.log('üöÄ –ó–ê–ü–£–°–ö NEXT.JS DEV –°–ï–†–í–ï–†–ê');
console.log('='.repeat(50));

// –ó–∞–ø—É—Å–∫–∞–µ–º Next.js —Å–µ—Ä–≤–µ—Ä
const server = spawn('npx', ['next', 'dev'], {
  cwd: process.cwd(),
  stdio: ['pipe', 'pipe', 'pipe'],
  shell: true
});

let serverStarted = false;

server.stdout.on('data', (data) => {
  const output = data.toString();
  console.log('üì§ STDOUT:', output);
  
  if ((output.includes('Local:') || output.includes('localhost:3000') || output.includes('Ready in')) && !serverStarted) {
    serverStarted = true;
    console.log('\nüéâ –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù!');
    console.log('üîó –°–°–´–õ–ö–ê: http://localhost:3000');
    console.log('='.repeat(50));
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(testLocalSite, 3000);
  }
});

server.stderr.on('data', (data) => {
  const output = data.toString();
  console.log('üì§ STDERR:', output);
  
  if ((output.includes('Local:') || output.includes('localhost:3000') || output.includes('Ready in')) && !serverStarted) {
    serverStarted = true;
    console.log('\nüéâ –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù!');
    console.log('üîó –°–°–´–õ–ö–ê: http://localhost:3000');
    console.log('='.repeat(50));
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(testLocalSite, 3000);
  }
});

server.on('error', (error) => {
  console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
});

async function testLocalSite() {
  console.log('\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ö–ê–õ–¨–ù–û–ì–û –°–ê–ô–¢–ê...');
  
  const browser = await chromium.launch();
  const page = await browser.newPage();
  
  try {
    await page.goto('http://localhost:3000', { 
      waitUntil: 'domcontentloaded', 
      timeout: 15000 
    });
    
    const title = await page.title();
    const bodyText = await page.textContent('body');
    const visibleText = bodyText.replace(/\s+/g, ' ').trim();
    
    console.log('‚úÖ –õ–û–ö–ê–õ–¨–ù–´–ô –°–ê–ô–¢ –†–ê–ë–û–¢–ê–ï–¢!');
    console.log('üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫:', title);
    console.log('üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:', visibleText.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    console.log('üìÑ –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤:', visibleText.substring(0, 100));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const hasScooters = await page.locator('img[alt*="scooter"]').count();
    const hasSocial = await page.locator('a[href*="whatsapp"]').count();
    
    console.log('üõµ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫—É—Ç–µ—Ä–æ–≤:', hasScooters);
    console.log('üì± –ö–Ω–æ–ø–∫–∏ —Å–æ—Ü. —Å–µ—Ç–µ–π:', hasSocial);
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ path: 'localhost-success.png', fullPage: true });
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞: localhost-success.png');
    
    console.log('\nüéØ –ó–ê–î–ê–ß–ê 1 –í–´–ü–û–õ–ù–ï–ù–ê:');
    console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: –†–ê–ë–û–¢–ê–ï–¢');
    console.log('üîó URL: http://localhost:3000');
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: localhost-success.png');
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
  
  await browser.close();
}

// –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥
setTimeout(() => {
  if (!serverStarted) {
    console.log('\n‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 20 —Å–µ–∫—É–Ω–¥');
    console.log('üí° –ü—Ä–æ–≤–µ—Ä–∏–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã...');
  }
}, 20000);

console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
