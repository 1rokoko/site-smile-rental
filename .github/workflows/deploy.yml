name: üöÄ Deploy Smile Rental to VPS

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'package-lock.json'
      - 'next.config.ts'
      - 'tsconfig.json'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  APP_NAME: 'smile-rental'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: üîç Check for changes
      id: changes
      run: |
        if [ "${{ github.event.inputs.force_deploy }}" == "true" ]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "üîÑ Force deployment requested"
        elif git diff --quiet HEAD^ HEAD -- src/ public/ package.json package-lock.json next.config.ts tsconfig.json; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "‚è≠Ô∏è No changes in application files"
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Changes detected in application files"
        fi

    - name: üü¢ Setup Node.js
      if: steps.changes.outputs.changes == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: üì¶ Install dependencies
      if: steps.changes.outputs.changes == 'true'
      run: |
        npm ci --prefer-offline --no-audit

    - name: üî® Build application
      if: steps.changes.outputs.changes == 'true'
      run: |
        npm run build

    - name: üß™ Run tests (if available)
      if: steps.changes.outputs.changes == 'true'
      run: |
        if npm run test --if-present; then
          echo "‚úÖ Tests passed"
        else
          echo "‚ö†Ô∏è No tests found or tests failed"
        fi

    - name: üöÄ Deploy to VPS
      if: steps.changes.outputs.changes == 'true'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: 38.180.122.239
        username: root
        password: 925LudK9Bv
        port: 22
        timeout: 300s
        script: |
          set -e  # Exit on any error

          echo "üöÄ Starting deployment to Smile Rental VPS..."
          echo "üìÖ Deployment time: $(date)"
          echo "üîó Commit: ${{ github.sha }}"

          # Navigate to project directory
          cd /var/www/smilerentalphuket.com/site-smile-rental

          # Emergency cleanup: Remove any stuck maintenance pages first
          echo "üßπ Emergency cleanup: removing any stuck maintenance pages..."
          rm -f /var/www/html/maintenance.html || true
          rm -f /var/www/smilerentalphuket.com/maintenance.html || true
          nginx -t && systemctl reload nginx || true
          sleep 2

          # Enable maintenance page (no 502 for users)
          echo "üü° Enabling maintenance page..."
          cp public/maintenance.html /var/www/html/maintenance.html || true
          nginx -t && systemctl reload nginx || true

          # Stop current application to avoid conflicts
          echo "‚èπÔ∏è Stopping current application..."
          pm2 stop ${{ env.APP_NAME }} || echo "App was not running"
          pm2 delete ${{ env.APP_NAME }} || echo "App was not in PM2"

          # Backup current version (just in case)
          echo "üíæ Creating backup..."
          cp -r .next .next.backup.$(date +%Y%m%d_%H%M%S) 2>/dev/null || echo "‚ö†Ô∏è No .next directory to backup"

          # Pull latest changes
          echo "üì• Pulling latest changes from GitHub..."
          git fetch origin main
          git reset --hard origin/main

          # Fix Next.js configuration for server mode
          echo "üîß Fixing Next.js configuration..."
          if grep -q "output: 'export'" next.config.ts; then
            echo "‚ö†Ô∏è Found 'output: export' in next.config.ts, removing it..."
            sed -i "/output: 'export'/d" next.config.ts
            echo "‚úÖ Next.js configuration fixed for server mode"
          else
            echo "‚úÖ Next.js configuration is already correct"
          fi

          # EMERGENCY: Complete cleanup to fix corrupted build
          echo "üö® EMERGENCY: Complete cleanup to fix corrupted build..."
          rm -rf .next
          rm -rf out
          rm -rf node_modules
          rm -rf .npm
          rm -rf package-lock.json
          npm cache clean --force
          sync
          echo 3 > /proc/sys/vm/drop_caches || true

          # Install dependencies
          echo "üì¶ Installing dependencies..."
          npm ci --production=false

          # Build the application
          echo "üî® Building application..."
          npm run build

          # Verify build
          echo "‚úÖ Verifying build..."
          if [ ! -f ".next/BUILD_ID" ]; then
            echo "‚ùå Build failed - no BUILD_ID found"
            exit 1
          fi
          echo "‚úÖ Build verification successful"

          # Apply performance optimizations
          echo "‚ö° Applying performance optimizations..."
          cd smile-rental-modern
          chmod +x *.sh || echo "No optimization scripts found"

          # Run fix deployment script
          echo "üîß Running deployment fix..."
          chmod +x fix-deployment.sh
          ./fix-deployment.sh

          # Create optimized PM2 ecosystem config if it doesn't exist
          if [ ! -f "ecosystem.config.js" ]; then
            echo "üìù Creating optimized PM2 configuration..."
            cat > ecosystem.config.js << 'EOFPM2'
          module.exports = {
            apps: [{
              name: 'smile-rental',
              script: 'npm',
              args: 'start',
              cwd: '/var/www/smilerentalphuket.com/site-smile-rental/smile-rental-modern',
              instances: 'max',
              exec_mode: 'cluster',
              max_memory_restart: '512M',
              node_args: '--max-old-space-size=512',
              autorestart: true,
              watch: false,
              max_restarts: 10,
              min_uptime: '10s',
              env: {
                NODE_ENV: 'production',
                PORT: 3000,
                NODE_OPTIONS: '--max-old-space-size=512'
              }
            }]
          };
          EOFPM2
          fi

          # Start application with optimized PM2 configuration
          echo "üöÄ Starting application with PM2 cluster mode..."
          pm2 start ecosystem.config.js

          # Save PM2 configuration
          pm2 save

          # Wait for application to start
          echo "‚è≥ Waiting for application to start..."
          sleep 10

          # Health checks
          echo "üß™ Running health checks..."

          # Check if app is responding on localhost
          for i in {1..5}; do
            if curl -f -s http://localhost:3000 > /dev/null; then
              echo "‚úÖ Application is responding on localhost:3000"
              break
            else
              echo "‚è≥ Attempt $i/5: Application not ready yet, waiting..."
              sleep 5
            fi
            if [ $i -eq 5 ]; then
              echo "‚ùå Application failed to start on localhost:3000"
              echo "üìã PM2 status:"
              pm2 status
              echo "üìã Application logs:"
              pm2 logs ${{ env.APP_NAME }} --lines 20
              exit 1
            fi
          done

          # Check domain accessibility
          if curl -f -s http://smilerentalphuket.com > /dev/null; then
            echo "‚úÖ Domain smilerentalphuket.com is accessible"
          else
            echo "‚ö†Ô∏è Domain may have Nginx issues, but application is running"
            echo "üí° Run: sudo ./fix-nginx-and-deploy.sh to fix domain issues"
          fi

          # NUCLEAR MAINTENANCE CLEANUP - Stop nginx, find ALL maintenance files, delete them
          echo "üü¢ NUCLEAR MAINTENANCE CLEANUP - Stopping nginx and removing ALL maintenance files..."
          systemctl stop nginx || true
          sleep 2

          # Find and delete ALL maintenance.html files on the entire server
          echo "üîç Searching for ALL maintenance.html files on server..."
          find / -name "maintenance.html" -type f 2>/dev/null | while read file; do
            echo "üóëÔ∏è Deleting: $file"
            rm -f "$file" || true
          done

          # Additional specific cleanup
          rm -f /var/www/html/maintenance.html || true
          rm -f /var/www/smilerentalphuket.com/maintenance.html || true
          rm -f /var/www/smilerentalphuket.com/site-smile-rental/maintenance.html || true
          rm -f /var/www/smilerentalphuket.com/site-smile-rental/public/maintenance.html || true
          rm -f /usr/share/nginx/html/maintenance.html || true
          rm -f /etc/nginx/html/maintenance.html || true

          # Clear nginx cache and restart
          echo "üîÑ Clearing nginx cache and restarting..."
          rm -rf /var/cache/nginx/* || true
          nginx -t && systemctl start nginx || systemctl restart nginx
          sleep 3

          # Comprehensive post-deployment checks
          echo "üß™ Running post-deployment security and functionality checks..."

          # Check HTTPS redirect
          echo "üîí Testing HTTPS redirect..."
          if curl -I http://smilerentalphuket.com 2>/dev/null | grep -q "301\|302"; then
            echo "‚úÖ HTTP to HTTPS redirect working"
          else
            echo "‚ö†Ô∏è HTTP to HTTPS redirect may not be working"
          fi

          # Check HTTPS response
          echo "üîí Testing HTTPS response..."
          if curl -fsSL https://smilerentalphuket.com > /dev/null 2>&1; then
            echo "‚úÖ HTTPS site is accessible"
          else
            echo "‚ö†Ô∏è HTTPS site may have issues"
          fi

          # Check security headers
          echo "üõ°Ô∏è Testing security headers..."
          HEADERS=$(curl -I https://smilerentalphuket.com 2>/dev/null || curl -I http://smilerentalphuket.com 2>/dev/null)

          if echo "$HEADERS" | grep -q "Strict-Transport-Security"; then
            echo "‚úÖ HSTS header present"
          else
            echo "‚ö†Ô∏è HSTS header missing"
          fi

          if echo "$HEADERS" | grep -q "Content-Security-Policy"; then
            echo "‚úÖ CSP header present"
          else
            echo "‚ö†Ô∏è CSP header missing"
          fi

          if echo "$HEADERS" | grep -q "X-Frame-Options"; then
            echo "‚úÖ X-Frame-Options header present"
          else
            echo "‚ö†Ô∏è X-Frame-Options header missing"
          fi

          # Check for common vulnerabilities
          echo "üîç Checking for common issues..."
          RESPONSE=$(curl -s https://smilerentalphuket.com || curl -s http://smilerentalphuket.com)

          if echo "$RESPONSE" | grep -qi "error\|exception\|stack trace"; then
            echo "‚ö†Ô∏è Potential error messages exposed"
          else
            echo "‚úÖ No obvious error messages exposed"
          fi

          # Test key pages
          echo "üìÑ Testing key pages..."
          for page in "" "scooter-rental/" "privacy-policy/" "security/"; do
            if curl -f -s "https://smilerentalphuket.com/$page" > /dev/null 2>&1; then
              echo "‚úÖ Page /$page is accessible"
            else
              echo "‚ö†Ô∏è Page /$page may have issues"
            fi
          done

          # Cleanup old backups (keep last 3)
          echo "üßπ Cleaning up old backups..."
          ls -t .next.backup.* 2>/dev/null | tail -n +4 | xargs rm -rf 2>/dev/null || echo "No old backups to clean"

          echo "üéâ Deployment completed successfully!"
          echo "üåê Website: http://smilerentalphuket.com"
          echo "üìä Status: pm2 status"

    - name: üìä Deployment Summary
      if: always()
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.changes.outputs.changes }}" == "false" ]; then
          echo "‚è≠Ô∏è **Skipped**: No changes detected in application files" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ **Success**: Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üåê **Website**: [smilerentalphuket.com](http://smilerentalphuket.com)" >> $GITHUB_STEP_SUMMARY
          echo "üîó **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "üìÖ **Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Failed**: Deployment encountered errors" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîç Check the logs above for details" >> $GITHUB_STEP_SUMMARY
          echo "üõ†Ô∏è You may need to run manual commands on the server" >> $GITHUB_STEP_SUMMARY
        fi
