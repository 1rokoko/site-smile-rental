const { chromium } = require('playwright');
const http = require('http');

async function testLocalConnection() {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –õ–û–ö–ê–õ–¨–ù–û–ì–û –î–û–°–¢–£–ü–ê –ö –°–ê–ô–¢–£');
    console.log('=' .repeat(50));
    
    // –¢–µ—Å—Ç 1: HTTP –∑–∞–ø—Ä–æ—Å –∫ IP
    console.log('üìç –¢–µ—Å—Ç 1: HTTP –∑–∞–ø—Ä–æ—Å –∫ 38.180.122.239...');
    try {
        const response = await fetch('http://38.180.122.239', { 
            method: 'HEAD',
            timeout: 10000 
        });
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${response.status}`);
        console.log(`üìÑ Headers:`, Object.fromEntries(response.headers));
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // –¢–µ—Å—Ç 2: HTTP –∑–∞–ø—Ä–æ—Å –∫ –¥–æ–º–µ–Ω—É
    console.log('\nüìç –¢–µ—Å—Ç 2: HTTP –∑–∞–ø—Ä–æ—Å –∫ smilerentalphuket.com...');
    try {
        const response = await fetch('http://smilerentalphuket.com', { 
            method: 'HEAD',
            timeout: 10000 
        });
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${response.status}`);
        console.log(`üìÑ Headers:`, Object.fromEntries(response.headers));
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // –¢–µ—Å—Ç 3: –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ç–µ—Å—Ç
    console.log('\nüìç –¢–µ—Å—Ç 3: –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –¥–æ—Å—Ç—É–ø...');
    const browser = await chromium.launch({ headless: true });
    const page = await browser.newPage();
    
    try {
        const response = await page.goto('http://38.180.122.239', { 
            waitUntil: 'domcontentloaded',
            timeout: 15000 
        });
        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä —Å—Ç–∞—Ç—É—Å: ${response.status()}`);
        console.log(`üìÑ URL: ${page.url()}`);
        
        const title = await page.title();
        console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}`);
        
        // –°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        await page.screenshot({ path: 'local-test-screenshot.png' });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: local-test-screenshot.png');
        
    } catch (error) {
        console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä –æ—à–∏–±–∫–∞: ${error.message}`);
    } finally {
        await browser.close();
    }
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    console.log('\nüìç –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤...');
    const ports = [80, 3000, 443];
    
    for (const port of ports) {
        try {
            const response = await fetch(`http://38.180.122.239:${port}`, { 
                method: 'HEAD',
                timeout: 5000 
            });
            console.log(`‚úÖ –ü–æ—Ä—Ç ${port}: –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å ${response.status})`);
        } catch (error) {
            console.log(`‚ùå –ü–æ—Ä—Ç ${port}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${error.message})`);
        }
    }
    
    console.log('\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
}

testLocalConnection();
